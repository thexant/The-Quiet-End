# cogs/status_updater.py
import discord
from discord.ext import commands, tasks
from discord import app_commands # <--- 1. IMPORT app_commands
import asyncio
from datetime import datetime
from utils.time_system import TimeSystem
import psycopg2
import psycopg2.errors

class StatusUpdaterCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.db = bot.db
        self.time_system = TimeSystem(bot)
        
        self.update_status_channels.start()
    
    def cog_unload(self):
        self.update_status_channels.cancel()

    async def _execute_status_update(self):
        """
        The core logic for updating status voice channels.
        Returns: (number_of_channels_updated, reason_string)
        """
        max_retries = 3
        retry_delay = 1.0
        
        for attempt in range(max_retries):
            try:
                # Check if database is accessible before proceeding
                try:
                    # Simple test query with timeout
                    test_result = self.db.execute_query("SELECT 1", fetch='one')
                    if not test_result:
                        if attempt < max_retries - 1:
                            print(f"‚ö†Ô∏è Database test failed, retrying in {retry_delay}s...")
                            await asyncio.sleep(retry_delay)
                            retry_delay *= 2
                            continue
                        return (0, "Database is not accessible")
                except (psycopg2.OperationalError, psycopg2.InterfaceError) as e:
                    if attempt < max_retries - 1:
                        print(f"‚ö†Ô∏è Database connection issue during status update, retrying in {retry_delay}s...")
                        await asyncio.sleep(retry_delay)
                        retry_delay *= 2
                        continue
                    return (0, "Database connection unavailable")
                except Exception as e:
                    raise e
                
                servers_with_status = self.db.execute_query(
                    "SELECT guild_id, status_voice_channel_id FROM server_config WHERE status_voice_channel_id IS NOT NULL",
                    fetch='all'
                )
                
                if not servers_with_status:
                    return (0, "No servers have a status channel configured.")
                
                current_ingame_time = self.time_system.calculate_current_ingame_time()
                if not current_ingame_time:
                    # No galaxy generated yet - show offline status
                    new_channel_name = "üåê|OFFLINE"
                else:
                    # Use the shortened date format
                    date_str = current_ingame_time.strftime("%d-%m-%Y")
                    
                    minutes = current_ingame_time.minute
                    if minutes < 15:
                        approx_time = f"{current_ingame_time.hour:02d}:00"
                    elif minutes < 45:
                        approx_time = f"{current_ingame_time.hour:02d}:30"
                    else:
                        next_hour = (current_ingame_time.hour + 1) % 24
                        approx_time = f"{next_hour:02d}:00"
                    
                    # Get player counts with error handling
                    try:
                        active_players = self.db.execute_query(
                            "SELECT COUNT(*) FROM characters WHERE is_logged_in = TRUE",
                            fetch='one'
                        )[0]
                        
                        dynamic_npcs = self.db.execute_query(
                            "SELECT COUNT(*) FROM dynamic_npcs WHERE is_alive = TRUE",
                            fetch='one'
                        )[0]
                    except psycopg2.errors.UndefinedTable as e:
                        # Table doesn't exist - galaxy not yet generated
                        new_channel_name = "üåê|OFFLINE"
                    except Exception as e:
                        raise e
                    else:
                        # Use the shortened name format
                        new_channel_name = f"üåê|{date_str}|‚åö{approx_time}|üü¢{active_players}"
                
                updated_count = 0
                for guild_id, channel_id in servers_with_status:
                    guild = self.bot.get_guild(guild_id)
                    if not guild:
                        continue
                    
                    channel = guild.get_channel(channel_id)
                    if not channel or not isinstance(channel, discord.VoiceChannel):
                        continue
                    
                    try:
                        if channel.name != new_channel_name:
                            await channel.edit(name=new_channel_name, reason="Automated status update")
                            updated_count += 1
                            await asyncio.sleep(1)
                            
                    except discord.HTTPException as e:
                        print(f"‚ùå Failed to update status channel in {guild.name}: {e}")
                    except Exception as e:
                        print(f"‚ùå Unexpected error updating status channel in {guild.name}: {e}")
                
                if updated_count > 0:
                    print(f"üîÑ Updated {updated_count} status voice channel(s): {new_channel_name}")
                    return (updated_count, f"Successfully updated channels with: {new_channel_name}")
                else:
                    return (0, "Channel names were already up-to-date.")
                
            except (psycopg2.OperationalError, psycopg2.InterfaceError) as e:
                if attempt < max_retries - 1:
                    print(f"‚ö†Ô∏è Database connection issue during status update (attempt {attempt + 1}), retrying in {retry_delay}s...")
                    await asyncio.sleep(retry_delay)
                    retry_delay *= 2
                    continue
                else:
                    print(f"‚ùå Database connection remained unavailable after {max_retries} attempts")
                    return (0, "Database connection unavailable")
            except Exception as e:
                print(f"‚ùå Error in status channel update task: {e}")
                return (0, f"An unexpected error occurred: {e}")
        
        return (0, "Failed after maximum retries")

    @tasks.loop(seconds=480)
    async def update_status_channels(self):
        await self._execute_status_update()
    
    @update_status_channels.before_loop
    async def before_status_update(self):
        await self.bot.wait_until_ready()
        await asyncio.sleep(30)
        print("üîÑ Status voice channel updater started")

    # -------------------------------------------------------------------------
    # 2. DECORATOR and FUNCTION SIGNATURE UPDATED for discord.py
    # -------------------------------------------------------------------------
    @app_commands.command(
        name="updatestatuscounter",
        description="Manually forces the status counters to update."
    )
    @app_commands.checks.has_permissions(administrator=True) # Use app_commands checks
    async def updatestatuscounter(self, interaction: discord.Interaction): # <--- Use discord.Interaction
        """Admin command to manually trigger a status update."""
        # 3. RESPONSE METHODS UPDATED for discord.py
        await interaction.response.defer(ephemeral=True)

        updated_count, reason = await self._execute_status_update()

        if updated_count > 0:
            embed = discord.Embed(
                title="‚úÖ Status Update Forced",
                description=f"Successfully updated **{updated_count}** channel(s).",
                color=0x00ff00
            )
        else:
            embed = discord.Embed(
                title="‚ÑπÔ∏è Status Update Result",
                description=f"No channels were updated. Reason: {reason}",
                color=0xff9900
            )
        
        await interaction.followup.send(embed=embed) # <--- Use interaction.followup


async def setup(bot):
    await bot.add_cog(StatusUpdaterCog(bot))